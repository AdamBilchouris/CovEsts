% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/corrected_standard_estimator.R
\name{compute_corrected_standard_est}
\alias{compute_corrected_standard_est}
\title{Kernel correction of the standard estimator.}
\usage{
compute_corrected_standard_est(
  X,
  maxLag,
  kernel_name,
  kernel_params = c(),
  N_T = 0.1 * length(X),
  N = length(X),
  meanX = mean(X),
  pd = TRUE,
  custom_kernel = FALSE,
  type = "covariance"
)
}
\arguments{
\item{X}{A vector representing the values of the process.}

\item{maxLag}{The maximum lag to compute the autocovariance function at.}

\item{kernel_name}{The name of the kernel function to be used. Possible values are:
"gaussian", "exponential", "wave", "rational_quadratic", "spherical", "circular", "bessel_j", "matern", "cauchy".}

\item{kernel_params}{A vector of parameters of the kernel function. See \link{kernel} for parameters.
In the case of "gaussian", "wave", "rational_quadratic", "spherical" and "circular", \code{N_T} takes the place of \eqn{\theta}.
For kernels that require parameters other than \eqn{\theta}, such as the Matern kernel, only \eqn{\nu} is needed for this vector.}

\item{N_T}{The rate at which the kernel function vanishes at. Recommended to be \eqn{0.1 N} when considering all lags. This parameter may be large for a small range of estimation lags.}

\item{N}{The length of X.}

\item{meanX}{The average value of X. Defaults to \code{meanX}.}

\item{pd}{Whether a positive definite estimate should be used. Defaults to \code{TRUE}.}

\item{custom_kernel}{If a custom kernel is to be used or not. See examples.}

\item{type}{Compute either the 'covariance' or 'correlation'. Defaults to 'covariance'.}
}
\value{
A vector whose values are a kernel corrected autocovariance estimator.
}
\description{
This function computes and the standard estimator and applies kernel correction to it.
It considers a kernel \eqn{a(\cdot)} which decays or vanishes to zero (depending on the type of kernel) where \eqn{a(0) = 1.}
The rate or value at which the kernel vanishes is \eqn{N_{T}}, which is recommended to be \eqn{0.1 N}, where \eqn{N} is the length of the process, however, one may need to play with this value.
\deqn{\widehat{C}^{(a)}(h) = \widehat{C}(h) a(h / N_{T}).}
}
\details{
The aim of this estimator is gradually bring an estimator to zero through the use of a kernel multiplier. This can be useful when estimating a
covariance function that is short-range dependent as estimators can have large fluctuations as the lag increases.
This estimator can be positive-definite depending on whether the choice of \eqn{\widehat{C}} and \eqn{a} are chosen to be positive-definite or not.
}
\examples{
X <- c(1, 2, 3)
compute_corrected_standard_est(X, 2, "gaussian")

X <- rnorm(1000)
Y <- c(X[1], X[2])
for(i in 3:length(X)) { Y[i] <- X[i] - 0.3*X[i - 1] - 0.6*X[i - 2] }
plot(Y)
plot(compute_corrected_standard_est(Y, length(Y)-1,
     "bessel_j", kernel_params=c(0, 1), N_T=0.2*length(Y)))

# Custom kernel
my_kernel <- function(x, theta, params) {
  stopifnot(theta > 0, length(x) >= 1, all(x >= 0))
  return(sapply(x, function(t) ifelse(t == 0, 1,
         ifelse(t == Inf, 0,
         (sin((t^params[1]) / theta) / ((t^params[1]) / theta)) * cos((t^params[2]) / theta)))))
}
X <- rnorm(1000)
Y <- c(X[1], X[2])
for(i in 3:length(X)) { Y[i] <- X[i] - 0.3*X[i - 1] - 0.6*X[i - 2] }
plot(Y)
plot(compute_corrected_standard_est(Y, length(Y)-1,
     "my_kernel", kernel_params=c(2, 0.25), custom_kernel = TRUE))
}
\references{
Yaglom, AM (1987). Correlation Theory of Stationary and Related Random Functions. Volume I: Basic Results. Springer New York. 10.1007/978-1-4612-4628-2.
}
